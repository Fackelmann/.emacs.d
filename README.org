#+TITLE: Emacs config
#+AUTHOR: Daniel Gonzalez Plaza

I'm working on moving it to a literate format. Over the years I have been building it around my usage, and it is a good opportunity to tidy it up and better understand the tool I use the most at my job, and in my personal life too.


* Package Management
Initialize ~package.el~:
#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

Add Melpa and Elpa:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

By default, Emacs automatically loads all installed packages in subsecuent sessions (this is not the same as loading the Lisp libraries). Disable automatic package loading, as we are explicitly loading them with ~(package-initialize)~.

#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
#+END_SRC

Install ~use-package.el~ if it's not installed already:
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

And treat every package as though it had specified using ~:ensure t~. This will automatically install all packages in a new system.
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

* Customizing default emacs behavior

I don't like the ~custom*~ variables being saved in my config file and cluttering it. I prefer to have them in their own location.
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

Likewise, I don't like having backup files (~) all over the place. But they are sometimes useful. This setting saves all of them under the same directory.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Inhibit the startup screen. I'll take the ~scratch~ buffer, thank you very much.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

I barely use the mouse, so the tool bar and menu bar are just taking screen real state.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

And I like having the clock in the mode line, so I can easily tell the time when I'm in full screen.

#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

Wrap around lines:
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+END_SRC

Show calendar week in calendar:
#+BEGIN_SRC emacs-lisp
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil
                      :height 0.7)
  (setq calendar-week-start-day 1
        calendar-intermonth-text
        '(propertize
          (format "%2d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'font-lock-function-name-face))
#+END_SRC

* org-mode
While I do agree with RMS on [[https://lists.gnu.org/archive/html/emacs-devel/2016-06/msg00272.html][his view that org-mode tries to pack too many features]], it doesn't detract for how good it is.
I use it to write my ideas, to keep track of my projects at work (with tasks ans subtasks, and timestamps, and time tracking). I even use it to write this file!

Many of this settings (mainly the part related to tasks and todos) were taken and adapted from [[http://doc.norang.ca/org-mode.html][Organize your life in plain text!]]

#+BEGIN_SRC emacs-lisp
  ;; Org settings
  (use-package org
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :config
    (setq org-default-notes-file (concat org-directory "/inbox.org"))
    (setq org-agenda-file-regexp "\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\'")
    (setq org-agenda-files (list "~/org/tasks.org"
                                 "~/org/work/tasks_work.org"
                                 "~/org/work/meetings.org"
                                 "~/org/work/projects"
                                 "~/org/personal/habits.org"
                                 "~/org/personal/scheduled.org"
                                 "~/org/personal/projects"))
    (setq org-log-done t)
    (setq org-log-into-drawer t)
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
    (setq org-todo-keyword-faces
          (quote (("TODO" :foreground "red" :weight bold)
                  ("NEXT" :foreground "white" :weight bold)
                  ("DONE" :foreground "forest green" :weight bold)
                  ("WAITING" :foreground "orange" :weight bold)
                  ("HOLD" :foreground "magenta" :weight bold)
                  ("CANCELLED" :foreground "forest green" :weight bold)
                  ("MEETING" :foreground "forest green" :weight bold)
                  ("PHONE" :foreground "forest green" :weight bold))))
    (setq org-todo-state-tags-triggers
          (quote (("CANCELLED" ("CANCELLED" . t))
                  ("WAITING" ("WAITING" . t))
                  ("HOLD" ("WAITING") ("HOLD" . t))
                  (done ("WAITING") ("HOLD"))
                  ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                  ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                  ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
    (setq org-capture-templates
          (quote (("t" "todo" entry (file "~/org/inbox.org")
                   "* TODO %?\n%U\n" :clock-in t :clock-resume t)
                  ("n" "note" entry (file "~/org/inbox.org")
                   "* %? :NOTE:\n%U\n\n" :clock-in t :clock-resume t)
                  ("m" "Meeting" entry (file "~/org/inbox.org")
                   "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                  ("p" "Phone call" entry (file "~/org/inbox.org")
                   "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                  ("s" "Slack" entry (file "~/org/inbox.org")
                   "* SLACK %? :SLACK:\n%U" :clock-in t :clock-resume t)
                  ("h" "Habit" entry (file "~/org/inbox.org")
                   "* NEXT %?\n%U\n\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
    ;; set up refile targets
    ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
    (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9))))
    ;; Allow refile to create parent tasks with confirmation
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    ;; Restore window configuration after quitting agenda
    (setq org-agenda-restore-windows-after-quit t)
    ;; Show hourly incrementes in time grid
    (setq org-agenda-time-grid '((daily today require-timed)
                                 (800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000)
                                 "....." "----------------"))
    ;; Set up org habits
    (add-to-list 'org-modules 'org-habit t)
    (setq org-habit-show-habits-only-for-today nil)
    (setq org-agenda-repeating-timestamp-show-all nil)
    ;; Indentation settings
    (setq org-startup-indented t)
    (setq org-indent-indentation-level 1)
    (setq org-adapt-indentation nil)
    ;; Show only current clock instance in mode line
    (setq org-clock-mode-line-total 'current)
    :init
    (add-hook 'org-agenda-mode-hook
              (lambda ()
                (visual-line-mode -1)
                (toggle-truncate-lines 1))))


  ;; set up Scheme for literate programming org mode 09/11/20
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((scheme . t)
     (python . t)))
  (setq org-confirm-babel-evaluate nil)
  (setq org-babel-python-command "python3")
  ;; Enable markdown export org mode
  (eval-after-load "org"
    '(require 'ox-gfm nil t))

  (use-package org-download)
  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)

#+END_SRC


** org-journal
# #+BEGIN_SRC emacs-lisp
#     (use-package org-journal
#       :defer t
#       :bind ("C-c C-k" . org-journal-new-scheduled-entry)
#       :config 
# ;;      (add-to-list 'org-agenda-files org-journal-dir)
#       (setq org-journal-file-header "#+BEGIN: clocktable :scope file :maxlevel 9 :block today :scope agenda :fileskip0 t
#       ,#+END"))

# #+END_SRC

* Packages

Autocompletion with company mode.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

ace-window. Jump to other window by typing a character. And set the characters so they are all in the home row.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("C-x o" . ace-window)
    :config (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

Magit. Use git without the command line.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config (setq magit-save-repository-buffers nil))
#+END_SRC

undo-tree graphically shows the state of emacs undo tree and lets you navigate through it.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode))
#+END_SRC

helm. Incremental completion and selection

#+BEGIN_SRC emacs-lisp
  ;; Enable helm mode 04/19/20
  ;; Ido mode didn't allow me to add a space to a filename in org roam
  ;; In any case helm seems more popular nowadays

  (use-package helm)
  (helm-mode 1)
  (define-key global-map [remap find-file] 'helm-find-files)
  (define-key global-map [remap occur] 'helm-occur)
  (define-key global-map [remap list-buffers] 'helm-buffers-list)
  (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
  (define-key global-map [remap execute-extended-command] 'helm-M-x)
  (define-key global-map [remap apropos-command] 'helm-apropos)
  (unless (boundp 'completion-in-region-function)
    (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
    (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point))
  (add-hook 'kill-emacs-hook #'(lambda () (and (file-exists-p "/tmp/helm-cfg.el") (delete-file "/tmp/helm-cfg.el"))))
#+END_SRC

Activate fuzzy matching in ~helm~.
#+BEGIN_SRC emacs-lisp
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-completion-style 'emacs)
  (setq completion-styles (if (version<= emacs-version "27.0") '(helm-flex) '(flex)))
#+END_SRC

Save and record macros for later use.

#+BEGIN_SRC emacs-lisp
  (use-package elmacro)
  (elmacro-mode)
#+END_SRC

Emacs native feed reader:
#+BEGIN_SRC emacs-lisp
  (use-package elfeed)
  (use-package elfeed-org)
  (elfeed-org)
  (global-set-key (kbd "C-x w") 'elfeed)
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

Helm support for lsp.
#+BEGIN_SRC emacs-lisp
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)

  ;;  
#+END_SRC
Language Server Protocol mode. Access docstrings, definitions, etc. 
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp)
           (web-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . (lambda ()
                         (let ((lsp-keymap-prefix "C-c l"))))))
    ;;                        (lsp-enable-which-key-integration)))))
    :config (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
    :config (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)
    :commands lsp)

#+END_SRC




Shows lsp information in a hover posframe.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :hook ((python-mode . lsp-ui-mode)))
#+END_SRC

Record used keys, to improve workflow.
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :init
    (setq keyfreq-excluded-commands
          '(self-insert-command
            forward-char
            backward-char
            previous-line
            next-line))
    :config
    (keyfreq-mode +1)
    (keyfreq-autosave-mode +1))
#+END_SRC

Eye candy for the mode line.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC

Jump to a specific character in the visible frames.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind ("M-g f" . avy-goto-char))
#+END_SRC

Syntax checking in Python with flycheck.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
  (add-hook 'python-mode-hook 'display-fill-column-indicator-mode)
  (setq-default fill-column 80)
#+END_SRC

Yasnippet, for template autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init (yas-global-mode 1))
#+END_SRC

Mode for managing multiple terminals in emacs. The dedicated terminal window is useful for debugging, as it is always visible
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :config
    (setq multi-term-program "/bin/bash"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-key term-raw-map (kbd "C-c C-j") 'term-line-mode)
  (define-key term-mode-map (kbd "C-c C-k") 'term-char-mode)
#+END_SRC

* Tramp
I sometimes use tramp for remote development. I wish it worked better, I usually end up going back to an emacs session over ssh.

Set up remote lsp client.
#+BEGIN_SRC emacs-lisp
  ;;  (lsp-register-client
  ;;   (make-lsp-client :new-connection (lsp-tramp-connection "pyls")
  ;;                    :major-modes '(python-mode)
  ;;                    :remote? t
  ;;                    :server-id 'pyls-remote))
  ;;  (setq lsp-restart 'ignore)
#+END_SRC

Trying to make Tramp faster by reducing the verbose output and never expiring the cache (need to make sure nothing besides Tramp modifies the files).

#+BEGIN_SRC emacs-lisp
  (setq remote-file-name-inhibit-cache nil)
  (setq tramp-verbose 1)
#+END_SRC

Configure tramp to work with bash on remote and load my profile.
#+BEGIN_SRC emacs-lisp
  (setq explicit-shell-file-name "/bin/bash")
#+END_SRC

* Personal config
There are some packages I don't want to load in my work laptop.

~org-roam~ Zettlekasten system. Similar to [[roamresearch.com][Roam]], but open and in plain text!
~deft~ To quickly search my zettlekasten notes.
~helm-bibtex~ and ~org-ref~, to manage references in ~org-roam~.
~mu4e~ Mail client in emacs.
~pdf-tools~ Read and annotate PDFs from within emacs.

#+BEGIN_SRC emacs-lisp
  ;; Helm bibtex 04/01
  (autoload 'helm-bibtex "helm-bibtex" "" t)
  (setq bibtex-completion-bibliography
        '("/Users/dgonzalez/org-roam/zotero-library.bib"))
  (setq bibtex-completion-pdf-field "file")

  (setq bibtex-completion-format-citation-functions
        '((org-mode      . bibtex-completion-format-citation-default)
          (latex-mode    . bibtex-completion-format-citation-cite)
          (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
          (default       . bibtex-completion-format-citation-default)))
  (global-set-key (kbd "C-c b") 'helm-bibtex)
  ;;Org-roam 04/12/20
  ;; Updated on 02/04/22 https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/

  (use-package org-roam
    :after org
    :init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
    :custom
    (org-roam-directory "~/org-roam")
    :config
    (org-roam-db-autosync-enable)
    (require 'org-roam-dailies)
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n r" . org-roam-node-random)		    
           :map org-mode-map
           (("C-c n i" . org-roam-node-insert)
            ("C-c n o" . org-id-get-create)
            ("C-c n t" . org-roam-tag-add)
            ("C-c n a" . org-roam-alias-add)
            ("C-c n l" . org-roam-buffer-toggle))
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n y" . org-roam-dailies-map))

  (require 'org-roam-protocol)
  (setq org-roam-link-title-format "R:%s")
  ;;    (org-roam-db-autosync-mode)
  ;; I like my filenames to be only given by timestamp, so removing title (which can change.
  (setq org-roam-capture-templates '(("d" "default" plain "%?"
                                      :target (file+head "%<%Y%m%d%H%M%S>.org"
                                                         "#+title: ${title}\n#+date: %u\n")
                                      :unnarrowed t)
                                     ("o" "other" plain "%?"
                                      :target (file+head "%<%Y%m%d%H%M%S>.org"
                                                         "#+title: ${title}\n#+date: %u\n")
                                      :unnarrowed t)))
  (setq org-roam-dailies-capture-templates '(("d" "default" entry"* %?"
                                              :target (file+head "%<%Y-%m-%d>.org"
                                                                 "#+title: %<%Y-%m-%d>\n")
                                              :unnarrowed t)))
  ;;    (setq org-roam-dailies-capture-templates '(("d" "default" entry "* %?"
  ;;                                        :target (file+head "%<%Y%m%d%H%M%S>.org"
  ;;                                                           "#+title: ${title}\n#+date: %u\n")
  ;;                                        :unnarrowed t)))
  (setq org-roam-capture-ref-templates '(("i" "internet" plain "%?"
                                          :target (file+head "%<%Y%m%d%H%M%S>.org"
                                                             "#+title: ${title}\n#+date: %u\n${body}")
                                          :unnarrowed t)))
  ;;    (setq org-roam-capture-templates
  ;;          '(("d" "default" plain (function org-roam-capture--get-point)
  ;;             "%?"
  ;;             :file-name "%<%Y%m%d%H%M%S>"
  ;;             :head "#+TITLE: ${title}\n"
  ;;             :unnarrowed t)))
  ;;          time-stamp-start "#\\+lastmod: [\t]*")
  (setq org-roam-graph-executable "/usr/local/bin/dot")
  (setq org-roam-graph-viewer "/Applications/Firefox Nightly.app/Contents/MacOS/firefox")


  (use-package deft
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    ;; We don't want recursion. The reason is that we have the /ref  subdirectory for literature notes, and I don't want to clutter my deft results
    (deft-recursive nil)
    (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/org-roam"))




  (use-package org-ref)
  ;; see org-ref for use of these variables
  (setq reftex-default-bibliography '("/Users/dgonzalez/org-roam/zotero-library.bib"))
  (setq org-ref-default-bibliography '("/Users/dgonzalez/org-roam/zotero-library.bib"))
  (setq org-ref-bibliography-notes '("/Users/dgonzalez/org-roam/bibnotes.org"))

  ;; Literature notes in org-roam 08/22/20
  (use-package org-roam-bibtex
    :after org-roam
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions))))


  (setq 
   orb-templates
   '(("r" "ref" plain (function org-roam-capture--get-point) ""
      :file-name "refs/${citekey}"
      :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}\n" ; <--
      :unnarrowed t)))

  ;; Add mu4e mail client
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
  (require 'mu4e)
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)
  (setq
   mue4e-headers-skip-duplicates  t
   mu4e-view-show-images t
   mu4e-view-show-addresses t
   mu4e-compose-format-flowed nil
   mu4e-date-format "%y/%m/%d"
   mu4e-headers-date-format "%Y/%m/%d"
   mu4e-change-filenames-when-moving t
   mu4e-attachments-dir "~/Downloads"
   user-mail-address "dan@danielgplaza.com"

   mu4e-maildir       "~/Maildir/fastmail"   ;; top-level Maildir
   ;; note that these folders below must start with /
   ;; the paths are relative to maildir root
   mu4e-refile-folder "/Archive"
   mu4e-sent-folder   "/Sent"
   mu4e-drafts-folder "/Drafts"
   mu4e-trash-folder  "/Trash")

  ;; this setting allows to re-sync and re-index mail
  ;; by pressing U
  (setq mu4e-get-mail-command  "mbsync -a")


  (setq
   message-send-mail-function   'smtpmail-send-it
   smtpmail-default-smtp-server "smtp.fastmail.com"
   smtpmail-smtp-server         "smtp.fastmail.com"
   smtpmail-stream-type 'starttls
   smtpmail-smtp-service 587
   smtp-local-domain "fastmail.com")

  (global-set-key (kbd "C-x m") 'mu4e)

  (fset 'my-move-to-trash "mTrash")
  (define-key mu4e-headers-mode-map (kbd "d") 'my-move-to-trash)
  (define-key mu4e-view-mode-map (kbd "d") 'my-move-to-trash)

  (setenv "PKG_CONFIG_PATH"
          (f-join
           (file-name-as-directory
            (nth 0
                 (split-string
                  (shell-command-to-string "brew --prefix"))))
           "Cellar" "libffi" "3.2.1" "lib" "pkgconfig"))
  (use-package pdf-tools
    :ensure t
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t))
#+END_SRC

* Other
Wrap lines when they reach the end of the window:

#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+END_SRC

Display number lines in all buffers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
#+END_SRC

Enable ligatures in [[https://github.com/tonsky/FiraCode][FiraCode]] font.
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'mac-auto-operator-composition-mode) (mac-auto-operator-composition-mode))
#+END_SRC

Gruvbox theme. Good contrast and colors.

#+BEGIN_SRC emacs-lisp
  ;; 05/28/20 gruvbox theme
  ;; (use-package gruvbox-theme
  ;;   :config
  ;;   (load-theme 'gruvbox-dark-medium t)
  ;;   (let ((line (face-attribute 'mode-line :underline)))
  ;;     (set-face-attribute 'mode-line          nil :overline   line)
  ;;     (set-face-attribute 'mode-line-inactive nil :overline   line)
  ;;     (set-face-attribute 'mode-line-inactive nil :underline  line)
  ;;     (set-face-attribute 'mode-line          nil :box        nil)
  ;;     (set-face-attribute 'mode-line-inactive nil :box        nil)))
#+END_SRC

Trying Spacegray theme.
#+BEGIN_SRC emacs-lisp
  (use-package spacegray-theme :defer t)
  (use-package doom-themes :defer t)
  (load-theme 'doom-palenight t)
  (doom-themes-visual-bell-config)
#+END_SRC


Set up emacsclient to use emacs when a command requires and editor.

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

Also need to set the following variables in ~.bashrc~:

#+BEGIN_SRC
  export EDITOR=emacsclient
  export VISUAL=emacsclient
  # Open regular emacs when I don't have a server running
  export ALTERNATE_EDITOR=/usr/local/bin/emacs
#+END_SRC

Show matching parents when mark is on one of them.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Set up Scheme for working on SICP.
#+BEGIN_SRC emacs-lisp
  (setq scheme-program-name "/usr/local/bin/scheme")
#+END_SRC

Is it "Easier To Change?", from the pragmatic programmer. Show the message every time we save a file.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook
            `(lambda ()
               (message "ETC?")))
#+END_SRC

Set keybinding for changing tabs
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x t RET") 'tab-bar-switch-to-tab)
#+END_SRC
* Custom functions

Kill all non-shell buffers. 
#+BEGIN_SRC emacs-lisp
  ;; Kill non matching buffers to clean up 03/28/19
  (defun kill-non-matching-buffers ()
    "Kill buffers that don't match \"shell\" or \"scratch\". Or any internal buffers for that matter."
    (interactive)
    ;; dont set a global variable
    ;; tempoary bind it with let
    (let ((list (buffer-list)))
      (while list
        ;; again bind buff locally
        (let ((buff (buffer-name (car list))))
          (setq list (cdr list))
          (when (and (not (string-match "shell" buff))
                     (not (string-match "scratch" buff))
                     ;; you probably don't want kill internal buffers
                     ;; which start with space or asterisk
                     (not (string-match "\\` " buff))
                     (not (string-match "\\`\\*" buff)))
            (kill-buffer buff))))))
  (global-set-key [f5] 'kill-non-matching-buffers)
#+END_SRC

Create a new shell.
#+BEGIN_SRC emacs-lisp
  (fset 'nshell
        "\C-u\370shell")
#+END_SRC


Some hooks I wrote for the ~pomidor~ package.
#+BEGIN_SRC emacs-lisp
  (use-package pomidor)
  (defun pomidor-insert-org-journal ()
    "Prompt the user to provide what was done during a pomodoro and add it to the journal file."
    ;; with a timestamp
    (org-journal-new-entry nil)
    (insert (concat (read-string "What did you do in this Pomodoro? ") " :POMODORO:"))
    ;; And close org-journal window
    (delete-window))

  ;; (defun pomidor-after-work-hook ()
  ;;   "Hook to execute after work.  Right when we enter the break state."
  ;;   (let ((state (pomidor--current-state)))
  ;;     (if (pomidor--break state)
  ;;         (pomidor-insert-org-journal))))
  ;; (advice-add 'pomidor-break :after #'pomidor-after-work-hook)
#+END_SRC


* Testing
Automatically create Table of contents of org document
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :ensure t
    :init
    (setq toc-org-max-depth 3)
    :config
    (add-hook 'org-mode-hook 'toc-org-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-download)
#+END_SRC

Don't break long lines in ~ansi-term~:
#+BEGIN_SRC emacs-lisp
  (setq term-suppress-hard-newline t)
#+END_SRC


Proselint:
#+BEGIN_SRC emacs-lisp
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message) line-end))
    :modes (gfm-mode
            markdown-mode
            org-mode
            text-mode))

  (add-to-list 'flycheck-checkers 'proselint)


#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package eprime-mode)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package midnight
    :config
    (midnight-delay-set 'midnight-delay "10:00pm"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python3")
#+END_SRC

#+BEGIN_SRC emacs-lisp
                                          ;hydra
  (use-package hydra
    :config
    (use-package use-package-hydra))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package anki-editor
    :after org
    :bind (:map org-mode-map
                ("<f12>" . anki-editor-cloze-region-auto-incr)
                ("<f11>" . anki-editor-cloze-region-dont-incr)
                ("<f10>" . anki-editor-reset-cloze-number)
                ("<f9>"  . anki-editor-push-tree))
    :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
    :config
    (setq anki-editor-create-decks t ;; Allow anki-editor to create a new deck if it doesn't exist
          anki-editor-org-tags-as-anki-tags t)

    (defun anki-editor-cloze-region-auto-incr (&optional arg)
      "Cloze region without hint and increase card number."
      (interactive)
      (anki-editor-cloze-region my-anki-editor-cloze-number "")
      (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
      (forward-sexp))
    (defun anki-editor-cloze-region-dont-incr (&optional arg)
      "Cloze region without hint using the previous card number."
      (interactive)
      (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
      (forward-sexp))
    (defun anki-editor-reset-cloze-number (&optional arg)
      "Reset cloze number to ARG or 1"
      (interactive)
      (setq my-anki-editor-cloze-number (or arg 1)))
    (defun anki-editor-push-tree ()
      "Push all notes under a tree."
      (interactive)
      (anki-editor-push-notes '(4))
      (anki-editor-reset-cloze-number))
    ;; Initialize
    (anki-editor-reset-cloze-number)
    )
  ;; Org-capture templates
  (setq org-my-anki-file "/Users/dgonzalez/org/anki.org")
  (add-to-list 'org-capture-templates
               '("a" "Anki basic"
                 entry
                 (file+headline org-my-anki-file "Dispatch Shelf")
                 "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: New\n:END:\n** Front\n%?\n** Back\n%x\n"))
  (add-to-list 'org-capture-templates
               '("A" "Anki cloze"
                 entry
                 (file+headline org-my-anki-file "Dispatch Shelf")
                 "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: New\n:END:\n** Text\n%x\n** Extra\n"))

  ;; Allow Emacs to access content from clipboard.
  (setq x-select-enable-clipboard t
        x-select-enable-primary t)
#+END_SRC

For distraction-free writing:
#+BEGIN_SRC emacs-lisp
  (use-package centered-cursor-mode
    :config
    (setq ccm-recenter-at-end-of-file t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package multi-term)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package racket-mode)
#+END_SRC

Disallow using tabs for indenting
#+BEGIN_SRC  emacs-lisp
  (setq indent-tabs-mode nil) 
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'web-mode-hook
  ;;       (lambda ()
  ;;         ;; short circuit js mode and just do everything in jsx-mode
  ;;         (if (equal web-mode-content-type "javascript")
  ;;             (web-mode-set-content-type "jsx")
  ;;           (message "now set to: %s" web-mode-content-type))))
#+END_SRC

	


Eslint javascript:
#+BEGIN_SRC emacs-lisp
  (require 'web-mode)
  ;; disable jshint since we prefer eslint checking
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  (add-to-list 'auto-mode-alist '("\\.js$" . web-mode))
  ;; use eslint with web-mode for jsx files
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (defun my-web-mode-hook ()
    "Hooks for Web mode. Adjust indents"
              ;;; http://web-mode.org/

    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))
  (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-ternary" . nil))
  (add-hook 'web-mode-hook
            (lambda ()
              (if (equal web-mode-content-type "javascript")
                  (web-mode-set-content-type "jsx")
                (message "now set to: %s" web-mode-content-type))))

  (add-hook 'web-mode-hook  'my-web-mode-hook)

  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
  (setq-default indent-tabs-mode nil)


#+END_SRC
