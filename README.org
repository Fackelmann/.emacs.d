#+TITLE: Emacs config
#+AUTHOR: Daniel Gonzalez Plaza

I'm working on moving it to a literate format. Over the years I have been building it around my usage, and it is a good opportunity to tidy it up and better understand the tool I use the most at my job, and in my personal life too.


* Package Management

Initialize ~package.el~:
#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

Suppress default prefix key warning for perspective.el. See https://github.com/nex3/perspective-el

#+BEGIN_SRC emacs-lisp
    (setq persp-suppress-no-prefix-key-warning t)
#+END_SRC

Add Melpa and Elpa:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

By default, Emacs automatically loads all installed packages in subsecuent sessions (this is not the same as loading the Lisp libraries). Disable automatic package loading, as we are explicitly loading them with ~(package-initialize)~.

#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
#+END_SRC

Install ~quelpa.el~  and ~quelpa-use-package~ if they are not installed already:
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'quelpa)
    (with-temp-buffer
      (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
      (eval-buffer)
      (quelpa-self-upgrade)))
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package)
  (custom-set-variables
   '(ns-command-modifier 'meta))
#+END_SRC

And treat every package as though it had specified using ~:ensure t~. This will automatically install all packages in a new system.
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

* Customizing default emacs behavior

I don't like the ~custom*~ variables being saved in my config file and cluttering it. I prefer to have them in their own location.
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

Likewise, I don't like having backup files (~) all over the place. But they are sometimes useful. This setting saves all of them under the same directory.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Inhibit the startup screen. I'll take the ~scratch~ buffer, thank you very much.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

I barely use the mouse, so the tool bar and menu bar are just taking screen real state.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

And I like having the clock in the mode line, so I can easily tell the time when I'm in full screen.

#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

Wrap around lines:
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+END_SRC

Display number lines in all buffers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
#+END_SRC

Set up emacsclient to use emacs when a command requires and editor.

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

Also need to set the following variables in ~.bashrc~:

#+BEGIN_SRC
  export EDITOR=emacsclient
  export VISUAL=emacsclient
  # Open regular emacs when I don't have a server running
  export ALTERNATE_EDITOR=/usr/local/bin/emacs
#+END_SRC

Show matching parents when mark is on one of them.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Show calendar week in calendar:
#+BEGIN_SRC emacs-lisp
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil
                      :height 0.7)
  (setq calendar-week-start-day 1
        calendar-intermonth-text
        '(propertize
          (format "%2d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'font-lock-function-name-face))
#+END_SRC

* org-mode

While I do agree with RMS on [[https://lists.gnu.org/archive/html/emacs-devel/2016-06/msg00272.html][his view that org-mode tries to pack too many features]], it doesn't detract for how good it is.
I use it to write my ideas, to keep track of my projects at work (with tasks ans subtasks, and timestamps, and time tracking). I even use it to write this file!

Many of this settings (mainly the part related to tasks and todos) were taken and adapted from [[http://doc.norang.ca/org-mode.html][Organize your life in plain text!]]

#+BEGIN_SRC emacs-lisp
        ;; Org settings
        (use-package org
          :bind (("C-c l" . org-store-link)
                 ("C-c a" . org-agenda)
                 ("C-c c" . org-capture))
          :config
          (setq org-default-notes-file (concat org-directory "/inbox.org"))
          (setq org-agenda-file-regexp "\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\'")
      ;;    (setq org-agenda-files (directory-files-recursively  "~/org/" "\.org$"))
          (setq org-agenda-files (list "~/org/inbox.org"
                                       "~/org/gtd.org"
                                       "~/org/someday.org"
                                       "~/org/tickler.org"
                                       "~/org/habits.org"))
          (setq org-log-done t)
  ;;        (setq org-log-into-drawer t)
          (setq org-todo-keywords
                (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
          (setq org-todo-keyword-faces
                (quote (("TODO" :foreground "red" :weight bold)
                        ("NEXT" :foreground "white" :weight bold)
                        ("DONE" :foreground "forest green" :weight bold)
                        ("WAITING" :foreground "orange" :weight bold)
                        ("HOLD" :foreground "magenta" :weight bold)
                        ("CANCELLED" :foreground "forest green" :weight bold)
                        ("MEETING" :foreground "forest green" :weight bold)
                        ("PHONE" :foreground "forest green" :weight bold))))
          (setq org-todo-state-tags-triggers
                (quote (("CANCELLED" ("CANCELLED" . t))
                        ("WAITING" ("WAITING" . t))
                        ("HOLD" ("WAITING") ("HOLD" . t))
                        (done ("WAITING") ("HOLD"))
                        ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                        ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                        ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
          (setq org-capture-templates
                (quote (("t" "todo" entry (file "~/org/inbox.org")
                         "* TODO %?\n%U\n" :clock-in t :clock-resume t)
                        ("n" "note" entry (file "~/org/inbox.org")
                         "* %? :NOTE:\n%U\n\n" :clock-in t :clock-resume t)
                        ("w" "Web site" entry
                         (file "~/org/inbox.org")
                         "* %:description \n\nwebsite: %:link\n\nSelected text:\n\n%:initial")
                        ("h" "Habit" entry (file "~/org/inbox.org")
                         "* NEXT %?\n%U\n\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
          ;; set up refile targets
          ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
          (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                           (org-agenda-files :maxlevel . 9))))
          ;; Allow refile to create parent tasks with confirmation
          (setq org-refile-use-outline-path 'file)
          (setq org-outline-path-complete-in-steps nil)
          (setq org-refile-allow-creating-parent-nodes 'confirm)
          ;; Restore window configuration after quitting agenda
          (setq org-agenda-restore-windows-after-quit t)
          ;; Show hourly incrementes in time grid
          (setq org-agenda-time-grid '((daily today require-timed)
                                       (800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000)
                                       "....." "----------------"))
          ;; Set up org habits
          (add-to-list 'org-modules 'org-habit t)
          (setq org-habit-show-habits-only-for-today nil)
          (setq org-agenda-repeating-timestamp-show-all nil)
          ;; Indentation settings
          (setq org-startup-indented t)
          (setq org-indent-indentation-level 1)
          (setq org-adapt-indentation nil)
          ;; Show only current clock instance in mode line
          (setq org-clock-mode-line-total 'current)
          :init
          (add-hook 'org-agenda-mode-hook
                    (lambda ()
                      (visual-line-mode -1)
                      (toggle-truncate-lines 1))))


        ;; set up Scheme for literate programming org mode 09/11/20
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((scheme . t)
           (python . t)))
        (setq org-confirm-babel-evaluate nil)
        (setq org-babel-python-command "python3")
        ;; Enable markdown export org mode
        (eval-after-load "org"
          '(require 'ox-gfm nil t))

        (use-package org-download)
        (use-package org-web-tools)
        ;; Drag-and-drop to `dired`
        (add-hook 'dired-mode-hook 'org-download-enable)
        (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
         (timeline . "  % s")
         (todo .
               " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
         (tags .
               " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
         (search . " %i %-12:c"))
      )

#+END_SRC


** org-journal

#+BEGIN_SRC emacs-lisp
    (use-package org-journal
      :bind ("C-c C-k" . org-journal-new-scheduled-entry)
      :config 
      (add-to-list 'org-agenda-files org-journal-dir))
#+END_SRC

* Packages


Autocompletion with company mode.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

ace-window. Jump to other window by typing a character. And set the characters so they are all in the home row.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("C-x o" . ace-window)
    :config (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

Magit. Use git without the command line.

#+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind ("C-x g" . magit-status)
      :config (setq magit-save-repository-buffers nil)
      (pinentry-start))
#+END_SRC

undo-tree graphically shows the state of emacs undo tree and lets you navigate through it.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode)
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))))
#+END_SRC

helm. Incremental completion and selection

#+BEGIN_SRC emacs-lisp
  ;; Enable helm mode 04/19/20
  ;; Ido mode didn't allow me to add a space to a filename in org roam
  ;; In any case helm seems more popular nowadays

  (use-package helm)
  (helm-mode 1)
  (define-key global-map [remap find-file] 'helm-find-files)
  (define-key global-map [remap occur] 'helm-occur)
  (define-key global-map [remap list-buffers] 'helm-buffers-list)
  (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
  (define-key global-map [remap execute-extended-command] 'helm-M-x)
  (define-key global-map [remap apropos-command] 'helm-apropos)
  (unless (boundp 'completion-in-region-function)
    (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
    (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point))
  (add-hook 'kill-emacs-hook #'(lambda () (and (file-exists-p "/tmp/helm-cfg.el") (delete-file "/tmp/helm-cfg.el"))))
#+END_SRC

Activate fuzzy matching in ~helm~.
#+BEGIN_SRC emacs-lisp
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-completion-style 'emacs)
  (setq completion-styles (if (version<= emacs-version "27.0") '(helm-flex) '(flex)))
#+END_SRC

Save and record macros for later use.

#+BEGIN_SRC emacs-lisp
  (use-package elmacro)
  (elmacro-mode)
#+END_SRC


Helm support for lsp.
#+BEGIN_SRC emacs-lisp
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)

  ;;  
#+END_SRC
Language Server Protocol mode. Access docstrings, definitions, etc. 
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp)
           (web-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . (lambda ()
                         (let ((lsp-keymap-prefix "C-c l"))))))
    ;;                        (lsp-enable-which-key-integration)))))
    :config (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
    :config (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)
    :commands lsp)

#+END_SRC




Shows lsp information in a hover posframe.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :hook ((python-mode . lsp-ui-mode)))
#+END_SRC

Record used keys, to improve workflow.
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :init
    (setq keyfreq-excluded-commands
          '(self-insert-command
            forward-char
            backward-char
            previous-line
            next-line))
    :config
    (keyfreq-mode +1)
    (keyfreq-autosave-mode +1))
#+END_SRC

Eye candy for the mode line.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC

Jump to a specific character in the visible frames.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind ("M-g f" . avy-goto-char))
#+END_SRC

Syntax checking in Python with flycheck.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
  (add-hook 'python-mode-hook 'display-fill-column-indicator-mode)
  (setq-default fill-column 80)
#+END_SRC

Yasnippet, for template autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init (yas-global-mode 1))
#+END_SRC





* Personal config
There are some packages I don't want to load in my work laptop.


~pdf-tools~ Read and annotate PDFs from within emacs.


#+BEGIN_SRC emacs-lisp
  (setenv "PKG_CONFIG_PATH"
          (f-join
           (file-name-as-directory
            (nth 0
                 (split-string
                  (shell-command-to-string "brew --prefix"))))
           "Cellar" "libffi" "3.2.1" "lib" "pkgconfig"))
  (use-package pdf-tools
    :ensure t
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t))
#+END_SRC

* Other

Enable ligatures in [[https://github.com/tonsky/FiraCode][FiraCode]] font.
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'mac-auto-operator-composition-mode) (mac-auto-operator-composition-mode))
#+END_SRC


Trying Spacegray theme.
#+BEGIN_SRC emacs-lisp
  (use-package spacegray-theme :defer t)
  (use-package doom-themes :defer t)
  (load-theme 'doom-palenight t)
  (doom-themes-visual-bell-config)
#+END_SRC

Set up Scheme for working on SICP.
#+BEGIN_SRC emacs-lisp
  (setq scheme-program-name "/usr/local/bin/scheme")
#+END_SRC

Is it "Easier To Change?", from the pragmatic programmer. Show the message every time we save a file.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook
            `(lambda ()
               (message "ETC?")))
#+END_SRC

Set keybinding for changing tabs
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x t RET") 'tab-bar-switch-to-tab)
#+END_SRC

* Custom functions

Kill all non-shell buffers. 
#+BEGIN_SRC emacs-lisp
  ;; Kill non matching buffers to clean up 03/28/19
  (defun kill-non-matching-buffers ()
    "Kill buffers that don't match \"shell\" or \"scratch\". Or any internal buffers for that matter."
    (interactive)
    ;; dont set a global variable
    ;; tempoary bind it with let
    (let ((list (buffer-list)))
      (while list
        ;; again bind buff locally
        (let ((buff (buffer-name (car list))))
          (setq list (cdr list))
          (when (and (not (string-match "shell" buff))
                     (not (string-match "scratch" buff))
                     ;; you probably don't want kill internal buffers
                     ;; which start with space or asterisk
                     (not (string-match "\\` " buff))
                     (not (string-match "\\`\\*" buff)))
            (kill-buffer buff))))))
  (global-set-key [f5] 'kill-non-matching-buffers)
#+END_SRC

Create a new shell.
#+BEGIN_SRC emacs-lisp
  (defun nshell (name)
    (interactive "sShell name: ")
    (shell (concat "shell-" name)))
#+END_SRC


Some hooks I wrote for the ~pomidor~ package.
#+BEGIN_SRC emacs-lisp
  (use-package pomidor)
  (defun pomidor-insert-org-journal ()
    "Prompt the user to provide what was done during a pomodoro and add it to the journal file."
    ;; with a timestamp
    (org-journal-new-entry nil)
    (insert (concat (read-string "What did you do in this Pomodoro? ") " :POMODORO:"))
    ;; And close org-journal window
    (delete-window))

  ;; (defun pomidor-after-work-hook ()
  ;;   "Hook to execute after work.  Right when we enter the break state."
  ;;   (let ((state (pomidor--current-state)))
  ;;     (if (pomidor--break state)
  ;;         (pomidor-insert-org-journal))))
  ;; (advice-add 'pomidor-break :after #'pomidor-after-work-hook)
#+END_SRC


* Testing
Some packages that I'm testing out and they haven't made it to my final setup yet




#+BEGIN_SRC emacs-lisp
  (use-package midnight
    :config
    (midnight-delay-set 'midnight-delay "10:00pm"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python3")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;; Allow Emacs to access content from clipboard.
  (setq x-select-enable-clipboard t
        x-select-enable-primary t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package racket-mode)
  (setq racket-program "/Applications/Racket v8.5/bin/racket")
#+END_SRC

Disallow using tabs for indenting
#+BEGIN_SRC  emacs-lisp
  (setq indent-tabs-mode nil) 
#+END_SRC

Perspective, workspaces
#+BEGIN_SRC emacs-lisp
(use-package perspective
  :ensure t  ; use `:straight t` if using straight.el!
  :bind (("C-x k" . persp-kill-buffer*))
  :init
  (persp-mode))
#+END_SRC

Rust:
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t)
#+END_SRC

Emojify:
#+BEGIN_SRC emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package beancount
    :quelpa ((beancount :repo "beancount/beancount-mode" :fetcher github))
    :ensure t
    :init
    (add-to-list 'load-path "~/.emacs.d/beancount-mode-main")
    (add-to-list 'auto-mode-alist '("\\.beancount\\'" . beancount-mode))
    (add-hook 'beancount-mode-hook #'outline-minor-mode)
    :bind (:map beancount-mode-map
                ("C-c C-n" . outline-next-visible-heading)
                ("C-c C-p" . outline-previous-visible-heading)
                ("C-c o" . beancount-cycle-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package pinentry
    :config
    (setq epg-pinentry-mode 'loopback))
#+END_SRC
